#!/usr/bin/env ruby

require 'colorize'

$MAX_COMMAND_COUNT = 500

def plugin(&block)
	this_plugin = Plugin.new
	this_plugin.instance_eval(&block)
	$LAST_LOADED_PLUGIN = this_plugin
end

module Logger
	def log(msg)
		puts msg
	end
end

class AutoCorrectEngine
	attr_accessor :command_stack

	def initialize
		load_plugins
		@command_stack = []
	end

	include Logger

	def load_plugins
		@plugins = []
		plugin_dir = File.dirname(__FILE__) + "/plugin"
		Dir[plugin_dir + "/*.rb"].each do |plugin_file|
			this_plugin = Plugin.load_plugin(plugin_file)
			this_plugin.engine = self
			@plugins << this_plugin
		end
	end

	def work_with_output(output)
		@output = output
	end

	def work_with_command_line(command_line)
		@command_stack.push command_line
		count = 0
		while @command_stack.length > 0
			count += 1
			if count >= $MAX_COMMAND_COUNT
				log "Reached max command count: #{$MAX_COMMAND_COUNT}"
				break
			end
			current_command = @command_stack.last
			output = run_command_line current_command
			match_result = match_output_and_try_to_fix current_command, output
			unless match_result
				@command_stack.pop
			end
		end
	end

	def match_output_and_try_to_fix(command_line, output)
		@plugins.each do |p|
			if p.match_and_fix(command_line || "", output)
				return true
			end
		end
		log "[PASS] #{command_line}".green
		return false
	end

	def run_command_line(command_line)
		log "[TRY] #{command_line}".yellow
		output = ""
		IO.popen(command_line + " 2>&1") do |f|
			f.each_line do |line|
				output += line
				print line
			end
		end
		output
	end
end

class Solution
	def initialize(this_plugin, regex, &block)
		@regex = regex
		@solution_action = proc(&block)
		@plugin = this_plugin
	end

	include Logger

	def match(output)
		if output =~ @regex
			log "[ERROR] caught by plugin: #{@plugin.name}".red
			return true
		else
			return false
		end
	end

	def fix(command_line, output)
		@command_line = command_line
		@output = output
		@m = output.match(@regex)
		@commands_to_be_pushed = []
		instance_eval(&(@solution_action))
		@commands_to_be_pushed.reverse.each do |command|
			push_command command
		end
	end

	def run(command_line)
		@commands_to_be_pushed.push command_line
	end

	def push_command(command_line)
		@plugin.engine.command_stack.push command_line
	end
end

class Plugin
	attr_accessor :name
	attr_accessor :engine

	include Logger

	def self.load_plugin(plugin_file)
		load plugin_file
		$LAST_LOADED_PLUGIN.name = plugin_file.sub(/.*\//, "").sub(/\..*/, "")
		$LAST_LOADED_PLUGIN
	end

	def match_command_line(regex)
		@command_line_regex = regex
	end

	def solution_for(regex, &block)
		@solutions ||= []
		@solutions << Solution.new(self, regex, &block)
	end

	def match_and_fix(command_line, output)
		if command_line =~ @command_line_regex
			@solutions.each do |solution|
				if solution.match output
					solution.fix command_line, output
					return true
				end
			end
			return false
		else
			return false
		end
	end
end

engine = AutoCorrectEngine.new

if ARGV.length == 0
	output = ""
	STDIN.each_line do |line|
		output += line
		print line
	end
	engine.work_with_output output
else
	command_line = ARGV.join " "
	engine.work_with_command_line command_line
end

